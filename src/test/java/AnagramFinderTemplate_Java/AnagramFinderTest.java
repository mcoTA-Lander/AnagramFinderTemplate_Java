/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package AnagramFinderTemplate_Java;

import com.google.common.collect.Ordering;

import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

/*
* ANY CHANGE OR MANIPULATION OF THIS TEST CLASS 
* WILL RESULT IN AN AUTOMATIC POINT DEDUCTION
*/

public class AnagramFinderTest {

    private AnagramFinder af;

    //Test 1
    @Test
    public void TestNullListE(){
        af = new AnagramFinder();

        Exception nullListE = assertThrows(Exception.class, () -> af.findAllAnagrams(null));
        assertEquals("Param 'wordList' is null or empty", nullListE.getMessage());

    }

    //Test 2
    @Test
    public void TestEmptyListE(){
        af = new AnagramFinder();

        List<List<String>> emptyListE = af.findAllAnagrams(new ArrayList<>());
        assertEquals(0, emptyListE.size());
    }

    //Test 3
    @Test
    public void TestNullValE(){
        af = new AnagramFinder();

        String[] nullValL = {"dale","vale", "veal", null, "lead"};

        Exception nullValE = assertThrows(Exception.class, () -> af.findAllAnagrams(Arrays.asList(nullValL)));
        assertEquals("Param 'wordList' contains null or empty val", nullValE.getMessage());

    }

    //Test 4
    @Test
    public void TestEmptyValE(){
        af = new AnagramFinder();
        String[] emptyValL = {"dale","vale", "veal", "", "lead"};

        Exception emptyValE = assertThrows(Exception.class, () -> af.findAllAnagrams(Arrays.asList(emptyValL)));
        assertEquals("Param 'wordList' contains null or empty val", emptyValE.getMessage());
    }


    //Test 5
    @Test
    public void TestIgnoreDuplicate(){
        af = new AnagramFinder();
        String[] l = {"lead","silent","dale","talent","new york times","vile","talent","deal","listen", "monkeys write", "evil"};
        List<List<String>> test = af.findAllAnagrams(Arrays.asList(l));
        List<String> actual = new ArrayList<>();
        for(List<String> sl : test){
            actual.addAll(sl);
        }
        assertTrue(Arrays.asList(l).size() > actual.size());
    }

    //Test 6
    @Test
    public void TestSingleWord(){
        af = new AnagramFinder();
        String[] list = {"fish"};
        assertEquals(0, af.findAllAnagrams(Arrays.asList(list)).size());
    }

    //Test 7
    @Test
    public void TestNoAnagrams(){
        af = new AnagramFinder();
        String[] list = {"bee", "ebb"};
        assertEquals(0, af.findAllAnagrams(Arrays.asList(list)).size());
    }

    //Test 8
    @Test
    public void TestTwoWords(){
        af = new AnagramFinder();

        String[] list = {"sham", "mash"};
        List<List<String>> actual = af.findAllAnagrams(Arrays.asList(list));
        assertEquals(1, actual.size());

        for (List<String> l: actual) {
            assertTrue(Ordering.natural().isOrdered(l));
        }

    }

    //Test 9
    @Test
    public void TestReturns(){
        af = new AnagramFinder();

        String[] list = {"lead", "silent","dale","talent","new york times","vile","deal","listen", "monkeys write", "evil"};
        List<String> expected  = new ArrayList<>();
        for (List<String> sList :af.findAllAnagrams(Arrays.asList(list))) {
            expected.add(sList.get(0));
            assertTrue(Ordering.natural().isOrdered(sList));
        }
        assertTrue(Ordering.natural().isOrdered(expected));
    }

    //Test 10
    @Test
    public void TestCaseInsensitive(){
        af = new AnagramFinder();
        String[] l = {"SILENT", "listen", "taLent", "LatenT"};
        List<List<String>> actual = af.findAllAnagrams(Arrays.asList(l));
        String expected = "[[LatenT, taLent], [listen, SILENT]]";
        assertEquals(expected, actual.toString());
    }

}
